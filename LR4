import cv2
import numpy as np

def Canny():
    image = cv2.imread(r'C:/Users/hexvgon/PycharmProjects/ACOM4/.venv/people1.jpg',cv2.IMREAD_GRAYSCALE)
    sigma = 1
    kernel = (5,5)
    
    razm = cv2.GaussianBlur(image,kernel,sigma)

    cv2.namedWindow('Blurring',cv2.WINDOW_KEEPRATIO)
    cv2.imshow('Blurring',razm)

    # нахождение частных производных
    sobX = cv2.Sobel(razm, cv2.CV_64F, 1, 0, ksize=3)
    sobY = cv2.Sobel(razm, cv2.CV_64F, 0, 1, ksize=3)

    # Вычисление длины градиента

    G = np.sqrt(sobX**2 + sobY**2)

    # Вычисление углов градиента

    corner = np.atan(sobY, sobX)
    corner_2 = np.arctan2(sobY,sobX)


    cv2.namedWindow('gradient', cv2.WINDOW_KEEPRATIO)
    cv2.imshow('gradient', G)
    cv2.namedWindow('Corner', cv2.WINDOW_KEEPRATIO)
    cv2.imshow('Corner', corner)

    # Задание 3

    row,col = G.shape

    BW = np.zeros((row, col), dtype=np.uint8)


    for i in range(1, row - 1):
        for j in range(1, col - 1):
            if (sobX[i, j] < 0 and sobY[i, j] < 0 and np.tan(corner[i, j]) < -2.414) or (sobY[i, j] < 0 and sobX[i, j] < 0 and np.tan(corner[i, j]) > 2.414):
                if (sobX[i, j] < 1 and sobY[i, j] < 0 and np.tan(corner[i, j]) < -0.414):
                    BW[i, j] = G[i, j]

            elif (2 - sobX[i, j] > 0 and sobY[i, j] < 0 and np.tan(corner[i, j]) < -0.414) or (sobY[i, j] > 0 and sobX[i, j] > 0 and np.tan(corner[i, j]) < 0.414):
                if (3 - sobX[i, j] > 0 and sobY[i, j] > 0 and np.tan(corner[i, j]) < 2.414):
                    BW[i, j] = G[i, j]

            elif (4 - sobX[i, j] > 0 and sobY[i, j] < 0 and np.tan(corner[i, j]) > 2.414) or (sobY[i, j] > 0 and sobX[i, j] < 0 and np.tan(corner[i, j]) < -2.414):
                if (sobY[i, j] > 0 and 5 - sobX[i, j] < 0 and np.tan(corner[i, j]) < -0.414):
                    BW[i, j] = G[i, j]

            elif (sobY[i, j] > 0 and 6 - sobX[i, j] < 0 and np.tan(corner[i, j]) > -0.414) or (sobY[i, j] < 0 and sobX[i, j] < 0 and np.tan(corner[i, j]) < 0.414):
                if (sobY[i, j] < 0 and 7 - sobX[i, j] < 0 and np.tan(corner[i, j]) < 2.414):
                    BW[i, j] = G[i, j]

    cv2.namedWindow('Nemax', cv2.WINDOW_KEEPRATIO)
    cv2.imshow('Nemax', BW)

    # двойная пороговая фильтрация

    max_grad = np.max(G)

    low_level = max_grad // 25
    high_level = max_grad // 10
    threshold = np.zeros((row, col), dtype= np.uint8)

    for i in range(1, row):
        for j in range(1, col):
            if BW[i, j] >= high_level:
                threshold[i, j] = 255
            elif BW[i, j] >= low_level and BW[i, j] < high_level:
                if BW[i + 1, j] >= high_level or BW[i - 1, j] >= high_level or BW[i, j + 1] >= high_level or BW[i, j - 1] >= high_level or BW[i + 1, j + 1] >= high_level or BW[i - 1, j - 1] >= high_level or BW[i + 1, j - 1] >= high_level or BW[i - 1, j + 1] >= high_level:
                    threshold[i, j] = 255

    cv2.namedWindow('Double_TH', cv2.WINDOW_KEEPRATIO)
    cv2.imshow('Double_TH', threshold)

    cv2.waitKey(0)
    cv2.destroyAllWindows()

Canny()
